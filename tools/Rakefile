$:.unshift(File.join(File.dirname(__FILE__), "scripts"))
require "tools"

task :default => [:help]

desc "List help commands"
task :help do
  puts "Usage: rake [command]"
  puts "  build\t\t\t\tbuild the tests"
  puts "  upload_assets\t\t\tupload the pre-compiled java packages"
  puts "  help\t\t\t\tlist help commands"
  puts "  gen_service_plan\t\trun service optionally"
end

desc "upload the pre-compiled java packages"
task :upload_assets do
  Tools::AssetsHelper.upload_assets
end

desc "run gen_service_plan.rb and create service_plan_version_test.sh"
task :gen_service_plan, :service, :plan do |t, args|
  unless ENV["VCAP_BVT_DEPLOY_MANIFEST"]
    puts "please specify deploy manifest by env var: VCAP_BVT_DEPLOY_MANIFEST"
    exit(1)
  end
  inputfile = ENV["VCAP_BVT_DEPLOY_MANIFEST"]
  cmd_args = ""
  cmd_args += "--service=#{args[:service]} " if args[:service] and !args[:service].empty?
  if args[:plan].nil? or args[:plan].empty?
    cmd_args += "--plan=free "
  else
    cmd_args += "--plan=#{args[:plan]} "
  end
  relative_output = "../service_plan_version_test.sh"
  abs_output = File.join(Dir.pwd, relative_output)
  output = `ruby ./scripts/gen_service_plan.rb  --input #{inputfile} #{cmd_args}  --output #{abs_output}`
  puts output
  if $?.exitstatus == 0
    puts "Succeeded. Script is generated at #{abs_output}"
  else
    puts "Failure."
  end
end

BUILD_ARTIFACT = File.join(Dir.pwd, ".build")
TESTS_PATH = File.join(Dir.pwd, "../assets")
VCAP_BVT_ASSETS_PACKAGES_HOME = File.join(File.dirname(__FILE__),
                                          "../.assets-binaries")

TESTS_TO_BUILD = [
  "#{TESTS_PATH}/spring/auto-reconfig-test-app",
  "#{TESTS_PATH}/spring/auto-reconfig-missing-deps-test-app",
  "#{TESTS_PATH}/spring/app_spring_service",
  "#{TESTS_PATH}/java_web/app_with_startup_delay",
  "#{TESTS_PATH}/java_web/tomcat-version-check-app",
  "#{TESTS_PATH}/spring/roo-guestbook",
  "#{TESTS_PATH}/spring/jpa-guestbook",
  "#{TESTS_PATH}/spring/hibernate-guestbook",
  "#{TESTS_PATH}/spring/spring-env",
  "#{TESTS_PATH}/spring/spring_imagemagick",
  "#{TESTS_PATH}/grails/guestbook",
  "#{TESTS_PATH}/java_web/java_tiny_app",
  "#{TESTS_PATH}/lift/hello_lift",
  "#{TESTS_PATH}/lift/lift-db-app",
  "#{TESTS_PATH}/standalone/java_app",

  "#{TESTS_PATH}/play/2.0/computer_database_autoconfig_disabled",
  "#{TESTS_PATH}/play/2.0/computer_database_cf_by_name",
  "#{TESTS_PATH}/play/2.0/computer_database_cf_by_type",
  "#{TESTS_PATH}/play/2.0/computer_database_jpa_mysql",
  "#{TESTS_PATH}/play/2.0/computer_database_multi_dbs",
  "#{TESTS_PATH}/play/2.0/computer_database_scala",
  "#{TESTS_PATH}/play/2.0/todolist",
  "#{TESTS_PATH}/play/2.0/zentasks_cf_by_name",

  "#{TESTS_PATH}/play/2.1/computer_database_jpa-2.1",
  "#{TESTS_PATH}/play/2.1/todolist_with_cfruntime-2.1",
  "#{TESTS_PATH}/play/2.1/zentasks_cf_by_type-2.1",

  "#{TESTS_PATH}/spring/auto-reconfig-annotation-app",
  "#{TESTS_PATH}/spring/javaee-namespace-app"
]

PLAY_VERSIONS= {"2.0" => "2.0.1", "2.1" => "2.1.0" }


desc "Build the tests. If the git hash hasn't change, nothing is built. To force a build, invoke 'rake build[--force]'"
task :build, [:force] do |t, args|
  puts "Downloading play"
  PLAY_VERSIONS.each do |major_version, play_version|
    download_play(play_version) if not File.exists? File.join(Dir.pwd, "play-#{play_version}","play")
  end

  puts "\nBuilding tests"
  if build_required? args.force
    prompt_message = "\nBVT need java development environment to build java-base apps.\n"+
      "Please run 'sudo aptitude install maven2 default-jdk' on your Linux box"
    `mvn -v 2>&1`
    raise prompt_message if $?.exitstatus != 0
    ENV['MAVEN_OPTS']="-XX:MaxPermSize=256M"

    update_list = []

    working_dir = Dir.pwd

    TESTS_TO_BUILD.each do |test|
      puts "\tBuilding '#{test}'"
      Dir.chdir test do
        play_version_match = /play\/(.*)\//.match(test)
        ENV['PLAY2_HOME']=File.join(working_dir, "play-#{PLAY_VERSIONS[play_version_match[1]]}") if play_version_match
        puts "Play home: #{ENV['PLAY2_HOME']}"
        sh('mvn clean package -DskipTests') do |success, exit_code|
          if success
            target_file = ''
            file_name = ''
            if test.include? "/standalone/java"
              app_name = test.split('/')[-1]
              build_folder = File.join(test, "/target/appassembler")
              file_name = app_name+'.zip'
              target_file = File.join(VCAP_BVT_ASSETS_PACKAGES_HOME, file_name)
              sh("cd #{build_folder} && zip -r #{target_file} *")
            else
              binaryname = File.join("target", "*.{war,zip}")
              binary_file = Dir.glob(binaryname).first
              app_name = test.split('/')[-1]
              file_type = '.'+binary_file.split('.')[-1]
              file_name = app_name+file_type
              target_file = File.join(VCAP_BVT_ASSETS_PACKAGES_HOME, file_name)
              sh("mkdir #{VCAP_BVT_ASSETS_PACKAGES_HOME}") unless Dir.exist?(
                VCAP_BVT_ASSETS_PACKAGES_HOME)
              sh("cp #{binary_file} #{target_file}")
            end
            md5 = Tools::AssetsHelper.check_md5(target_file)
            update_list << Hash['filename' => file_name, 'md5' => md5]
          else
            clear_build_artifact
            sh("mvn clean -q")
            fail "\tFailed to build #{test} - aborting build"
          end
        end
      end
      puts "\tCompleted building '#{test}'"
    end
    save_git_hash
    Tools::AssetsHelper.update_local_hash(update_list)
  else
    puts "Built artifacts in sync with test assets - no build required"
  end
end

def build_required? (force_build=nil)
  if File.exists?(BUILD_ARTIFACT) == false or (force_build and force_build == "--force")
    return true
  end
  Dir.chdir(TESTS_PATH) do
    saved_git_hash = IO.readlines(BUILD_ARTIFACT)[0].split[0]
    git_hash = `git rev-parse --short=8 --verify HEAD`
    saved_git_hash.to_s.strip != git_hash.to_s.strip
  end
end

def download_play(play_version)
  puts "Downloading and unpacking Play Framework"

  if play_version == "2.0.1"
    sh("wget http://downloads.typesafe.com/releases/play-2.0.1.zip")
  else
    sh("wget http://downloads.typesafe.com/play/#{play_version}/play-#{play_version}.zip")
  end

  sh("unzip -q play-#{play_version}.zip")
  FileUtils.rm_f("play-#{play_version}.zip")
end

def save_git_hash
  Dir.chdir(TESTS_PATH) do
    git_hash = `git rev-parse --short=8 --verify HEAD`
    File.open(BUILD_ARTIFACT, 'w') {|f| f.puts("#{git_hash}")}
  end
end

def clear_build_artifact
  puts "\tClearing build artifact #{BUILD_ARTIFACT}"
  File.unlink BUILD_ARTIFACT if File.exists? BUILD_ARTIFACT
end
